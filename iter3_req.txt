https://web.archive.org/web/20150509053652/http://www.cise.ufl.edu/~dts/cop4331/iter3/iter3.html
COP 4331
Term Project
Iteration 3
 
Project overview: Iteration 3
OOP! not POOP!
This iteration's primary objective is delivering a piece of working software that implements an excellent object-oriented design. In this iteration, I expect you to apply all the techniques and OO principles covered in class: submissions that do not will be worth little to nothing.
Start fresh
When developing iteration 3, you are encouraged to use the best ideas from the iteration 2 projects — but you are expected to start your design from scratch; you may not recycle an existing design/codebase (should you do so, your iteration 3 grade will be ZERO!). The reasons for this are:
Core requirements change — some of the new requirements are likely to “break” the existing designs.
Fresh start — rather than trying to fix and extend what you've already done, this is an opportunity to take everything you've learned and get it “right” from the beginning.
New perspectives — each of the teams has members from most (if not all) of the old teams: this is an opportunity to benefit from your combined experience by making every aspect of the system a subject for discussion.
Fairness — each of the teams has members from the old teams: by prohibiting recycling, I am putting everyone in your team on an equal footing.
Due: Monday, 4/20
Your team may not begin implementation until the Iteration 3 design document assignment has been submitted.
Requirements from previous iterations
All Iteration 1 and Iteration 2 requirements are still in effect—except as superceded below.
Game play requirements new to Iteration 3
Entities
There is two new entity types:
mount/vehicle - a creature/machine that an avatar can ride or drive; typically enables improved movement characteristics (e.g., faster or capable of traversing certain terrain types), and
pet - an autonomous creature/machine that follows the avatar around; typically steals treasure before you can get to it, starts fights, and otherwise gets into trouble.
Tile shape
The game shall be played on a hextile (hexagonal tile) map. Hextiles shall be oriented so that flat sides are parallel to the top and the bottom of the view port.
Concept: influence radius and area effects
This concept is carried over from iteration 2, but updated to account for the new tile shape.
linear effects (e.g., bullet) straight line in the direction the unit is facing
angular effects (e.g., shotgun blast) approximates an expanding 60° arc centered on the direction the unit is facing
radial effects (e.g., bomb blast) 360° expanding effect (facing independent)

Viewport: fog of war
The avatar shall have a radius of visibility; any tile within that radius is considered visible. The size of the radius may be affected by items, potions, the mount being ridden, &c. There shall be three kinds of tile:
Visible: these tiles are currently in the line of sight of the player's avatar. The tile's terrain type and contents — items, (non-cloaked and cloaked but detected) units and bases, etc. — will be displayed.
Non-visible: these tiles are have been "seen" but are not currently in the line of sight of the avatar. What ever was last seen on the tile will be displayed — what is displayed will not reflect any changes that have occurred since the tile was visible.
Shrouded: these tiles have never been "seen."
You are encouraged to provide some visual indicator to help players differentiate between visible and non-visible tiles — for those using a graphical display, having an transparent overlay color to "ghost" the tile would be an effective solution.
Note: Fog of war and the observation skill are separate concepts!
Optional
You may incorporate items, spells, or other thematically appropriate “technologies” which make a set of tiles visible: for instance, the Eye of Cia is a device that renders all tiles in a two-tile radius to be visible, regardless of the owner's actual location, until it is (again) picked-up. The Eschelon of the Mystic Brotherhood of the N'Sa is a powerful, but very expensive spell to cast, which for 30 seconds causes all non-visible tiles to be rendered as visible, and all shrouded tiles to be rendered as non-visible—at the end of the spell, the tiles are rendered normally.
“Rivers”
A “river” tile one that has a flow direction, which is a force that tries to push movable things to an adjacent outlet tile; how hard the “river” pushes depends upon the flow rate. A (potentially mounted) avatar can try to move counter to the flow at a net speed = avatar's movement rate - “river's” flow rate (when positive, it moves against the flow, zero, stays in place, and negative, moves with the flow at a correspondingly reduced rate). Moving in the same direction as the flow increases the movement rate by the flow rate.
For instance, assume that the avatar's base movement rate is 1. An avatar that moves on to a “river” tile with a flow strength of 1 and takes no further action will be swept (at a rate of 1) along by the current to the outlet tile. Had the avatar attempted to move counter to the “river's” flow, it would stay in place (it's movement would be cancelled out by the flow). Moving in the flow direction would be at a rate of 2.
You are encouraged to provide a visual indicator as to the direction of flow. Your group may choose to make flow direction mutable, which may make for some interesting puzzles—e.g., part of a quest involves doing actionX to reverse the flow, which then makes it possible to “float” downstream and reach a previously unreachable area. As noted in class, the term “river” is used metaphorically; you may choose to implement it with literal rivers, wind tunnels, arteries, etc. “River” tiles may be chained (one flowing into the next) and bundled (making wider flowing regions).
User interface requirements new to Iteration 3
Area viewport
The area viewport shall normally remain centered on the avatar, but shall be scrollable independently of the avatar's movement—i.e., when the avatar is standing still, the player may scroll the viewport. Moving the avatar will cause the viewport to recenter.
Default navigational controls for hextile maps
The default keymap shall allow the player to move the currently selected unit with the numeric keypad:

Goals and optional features
Goals
The goals new to this iteration include:
Entities
mounts/vehicles
pets
hextile map
fog of war
“rivers”
scrollable viewport
Optional features
Should you choose to implement other game play oriented features (e.g., quests!), be sure that you have all the required features implemented first!
Final word
Feel free to rename/retheme the character classes, &c. The ones provided are used to describe the required functionality, not the required names.
This website is an original work, Copyright © 2015 by Dave Small. All rights reserved.